data <- iris[iris[, "Species"] != "setosa", c("Sepal.Length", "Petal.Width", "Species")]
data["Species"] <- as.factor(as.character(data[["Species"]]))
lr <- glm(Species ~ ., data, family = binomial)
x <- seq(min(lr$linear.predictors), max(lr$linear.predictors), length.out = 200)
# Fake train/test split
df <- data.frame(y = rnorm(nrow(data), lr$y, 0.01), logits = lr$linear.predictors, split = c("train", "test")[1 + (rnorm(nrow(data)) > 0)])
ggplot(df) +
geom_point(aes(logits, y, color = split, shape = split)) +
geom_line(aes(x, y), data = data.frame(x = x, y = 1 / (1 + exp(-x)))) +
xlab(expression(beta^T * x)) +
theme_classic()
library(ggplot2)
ggplot(df)
library(ggplot2)
data <- iris[iris[, "Species"] != "setosa", c("Sepal.Length", "Petal.Width", "Species")]
data["Species"] <- as.factor(as.character(data[["Species"]]))
lr <- glm(Species ~ ., data, family = binomial)
x <- seq(min(lr$linear.predictors), max(lr$linear.predictors), length.out = 200)
# Fake train/test split
df <- data.frame(y = rnorm(nrow(data), lr$y, 0.01), logits = lr$linear.predictors, split = c("train", "test")[1 + (rnorm(nrow(data)) > 0)])
ggplot(df) +
geom_point(aes(logits, y, color = split, shape = split)) +
geom_line(aes(x, y), data = data.frame(x = x, y = 1 / (1 + exp(-x)))) +
xlab(expression(beta^T * x)) +
theme_classic()
library(glmnet)
library(glmnetUtils)
spam_train <- read.csv("../assets/spam_train.csv")
spam_test <- read.csv("../assets/spam_test.csv")
## Train the model
m <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.001)
## Regression coefficients
print(coef(m))
## The predicted probabilities of y=1 on the test data
phat <- predict(m, spam_test, type = "response")[, 1]
library(glmnet)
library(glmnetUtils)
spam_train <- read.csv("../assets/spam_train.csv")
spam_test <- read.csv("../assets/spam_test.csv")
## Train the model
m <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.001)
## Regression coefficients
print(coef(m))
## The predicted probabilities of y=1 on the test data
phat <- predict(m, spam_test, type = "response")[, 1]
.4}
data <- iris[iris[, "Species"] != "setosa", c("Sepal.Length", "Petal.Width", "Species")]
data["Species"] <- as.factor(as.character(data[["Species"]]))
lr <- glm(Species ~ ., data, family = binomial)
x <- seq(min(lr$linear.predictors), max(lr$linear.predictors), length.out = 200)
# Fake train/test split
df <- data.frame(y = rnorm(nrow(data), lr$y, 0.01), logits = lr$linear.predictors, split = c("train", "test")[1 + (rnorm(nrow(data)) > 0)])
ggplot(df) +
geom_point(aes(logits, y, color = split, shape = split)) +
geom_line(aes(x, y), data = data.frame(x = x, y = 1 / (1 + exp(-x)))) +
xlab(expression(beta^T * x)) +
theme_classic()
sigma <- function(x) 1 / (1 + exp(-x))
makedata <- function(n) {
a <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
p <- sigma(0.5 + 2 * a$x1 - a$x2 - 0.5 * a$x1 * a$x2)
a$y <- 1 * (runif(n) < p)
a
}
data_test <- makedata(10000) # test data set
data <- lapply(2^(3:12), makedata) # training data sets
write.csv(data_test, "../assets/toy_test.csv", row.names = FALSE)
for (d in data) {
write.csv(d, sprintf("../assets/toy_train_%d.csv", nrow(d)), row.names = FALSE)
}
